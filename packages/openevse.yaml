---
#
# Control an OpenEVSE Electric Car Charging Station.
#
# There are unfortunately quite a few pre-requisites needed to work with
# OpenEVSE.
#
## REQUIREMENTS ##
#
# Version 2.9.1 of OpenEVSE WiFi module, both MQTT and REST APIs are
# used because each provides different capabilities.
#
# You must have MQTT setup in Home Assistant.
#
# Required custom components:
#   input_number (allows dynamic adjustment of min/max values)
#   input_select (allows label/value to be separately set)
#   rest_command (supports HTTP DIGEST authentication required by OpenEVSE)
#
# Required secrets
#   See '../secrets-example.yaml' for required secrets
#
# You must configure the OpenEVSE wifi control panel Services Tab:
#   - Enable MQTT:  Checked
#   - Host:         Your hassio IP address where the MQTT broker is running
#   - Port:         MQTT broker port (1883)
#   - Username:     MQTT username for OpenEVSE (e.g. "openevse")
#   - Password:     MQTT password for OpenEVSE
#   - Base-topic:   openevse (or edit secrets)
#   - Voltage-topic: Unused
#
# Optional Solar PV divert (this is poorly tested as I don't have a PV setup)
#   - Enable Solar PV divert: checked
#   - Feed:          openevse_solar
#
# For RAPI Details, see:
#   https://github.com/OpenEVSE/open_evse/blob/stable/firmware/open_evse/rapi_proc.h
#

# RAPI Service
# When calling this, set service data for either the full URL in `url`
# or set both `host` and `rapi` variables. `url` has precedence
rest_command:
  openevse_rapi:
    method: post
    authentication: digest
    username: !secret OPENEVSE_USERNAME
    password: !secret OPENEVSE_PASSWORD
    url: "{{ url | default('http://' ~ host ~ '/r?json=1&rapi=' ~ rapi, true) }}"

# Sensors
sensor:

  # Get OpenEVSE min/max current via REST
  - platform: rest
    name: "OpenEVSE RAPI $GC"
    resource: !secret OPENEVSE_REST_GET_CURRENT_CAPACITY_RANGE
    force_update: no
    authentication: digest
    username: !secret OPENEVSE_USERNAME
    password: !secret OPENEVSE_PASSWORD
    headers:
        User-Agent: Home Assistant
        Content-Type: application/json
    json_attributes: [ 'cmd', 'ret' ]
    value_template: >-
      {{- value_json.ret -}}

  # Get OpenEVSE Current Settings via REST
  - platform: rest
    name: "OpenEVSE RAPI $GE"
    resource: !secret OPENEVSE_R_GE
    force_update: no
    authentication: digest
    username: !secret OPENEVSE_USERNAME
    password: !secret OPENEVSE_PASSWORD
    headers:
        User-Agent: Home Assistant
        Content-Type: application/json
    json_attributes: [ 'cmd', 'ret' ]
    value_template: >-
      {{- value_json.ret -}}
      
  - platform: rest
    name: "OpenEVSE RAPI $GG"
    resource: !secret OPENEVSE_REST_GET_CHARGING_CURRENT_AND_VOLTAGE
    force_update: yes
    authentication: digest
    username: !secret OPENEVSE_USERNAME
    password: !secret OPENEVSE_PASSWORD
    headers:
        User-Agent: Home Assistant
        Content-Type: application/json
    json_attributes: [ 'cmd', 'ret' ]
    value_template: >-
      {{- value_json.ret -}}

  - platform: rest
    name: "OpenEVSE Status"
    resource: !secret OPENEVSE_R_STATUS
    force_update: no
    authentication: digest
    username: !secret OPENEVSE_USERNAME
    password: !secret OPENEVSE_PASSWORD
    headers:
        User-Agent: Home Assistant
        Content-Type: application/json
    json_attributes:
      - "mode"
      - "wifi_client_connected"
      - "srssi"
      - "ipaddress"
      - "emoncms_connected"
      - "packets_sent"
      - "packets_success"
      - "mqtt_connected"
      - "ohm_hour"
      - "free_heap"
      - "comm_sent"
      - "comm_success"
      - "amp"
      - "pilot"
      - "temp1"
      - "temp2"
      - "temp3"
      - "state"
      - "elapsed"
      - "wattsec"
      - "watthour"
      - "gfcicount"
      - "nogndcount"
      - "stuckcount"
      - "divertmode"
      - "solar"
      - "grid_ie"
      - "charge_rate"
      - "divert_update"
    value_template: >-
      {{- value_json.state -}}

  # The RAPI REST Sensor is very unreliable, so filter it
  - platform: filter
    name: "OpenEVSE Session Energy"
    entity_id: sensor.openevse_session_energy_raw
    filters:
      - filter: outlier
        window_size: 6
        radius: 0.5

  # Template Sensors
  - platform: template
    sensors:
      openevse_session_energy_raw:
        friendly_name: "OpenEVSE Session Energy (unfiltered)"
        icon_template: mdi:gauge
        unit_of_measurement: 'kWh'
        value_template: >-
          {% set wattsec = state_attr('sensor.openevse_status', 'wattsec')
                           |float(-1) %}
          {% if wattsec >= 0 %}
            {{ (wattsec / 3600000)|round(2) }}
          {% else %}
            unknown
          {% endif %}

      # Charging current from REST API
      openevse_charging_current_rest:
        unique_id: openevse_charging_current_rest
        friendly_name: "OpenEVSE Charging Current (REST)"
        icon_template: mdi:current-ac
        unit_of_measurement: 'A'
        value_template: >-
          {{- states('sensor.openevse_rapi_gg') |
              regex_replace('^\$OK ([0-9]+) (-?[0-9]+).*', '\\1') | float(0) / 1000 -}}

      # Combine both MQTT and REST sensors since neither ends up being super reliable
      openevse_charging_current:
        unique_id: openevse_charging_current
        friendly_name: "OpenEVSE Charging Current"
        icon_template: mdi:current-ac
        unit_of_measurement: 'A'
        value_template: >-
          {{-
            ([
              state_attr('sensor.openevse_status','charge_rate') | float(0),
              states('sensor.openevse_charging_current_mqtt') | float(0)
            ] | max)
          -}}

      # Combine both MQTT and REST sensors since neither ends up being super reliable
      openevse_pilot_current:
        unique_id: openevse_pilot_current
        friendly_name: "OpenEVSE Pilot Current"
        icon_template: mdi:current-ac
        unit_of_measurement: 'A'
        value_template: >-
          {{-
            ([
              state_attr('sensor.openevse_status','pilot') | float(0),
              states('sensor.openevse_pilot_current_mqtt') | float(0)
            ] | max)
          -}}

      openevse_pilot_current_rest:
        friendly_name: "OpenEVSE Pilot Current (REST)"
        icon_template: mdi:current-ac
        unit_of_measurement: 'A'
        value_template: "{{ state_attr('sensor.openevse_status', 'pilot') | float(-1) }}" 

      openevse_state:
        friendly_name: "OpenEVSE State"
        icon_template: >-
          {%- if state_attr('sensor.openevse_status', 'state') | regex_match('^[01]$') -%}
            mdi:power-plug-off
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^2$') -%}
            mdi:car-electric
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^3$') -%}
            mdi:battery-charging
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^([456789]|10)$') -%}
            mdi:battery-alert
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^254$') -%}
            mdi:sleep
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^255$') -%}
            mdi:power-off
          {%- else -%}
            mdi:battery-unknown
          {%- endif -%}
        value_template: >-
          {%- if state_attr('sensor.openevse_status', 'state') | regex_match('^[01]$') -%}
            Not Connected
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^2$') -%}
            Connected
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^3$') -%}
            Charging
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^([456789]|10)$') -%}
            Error ({{- state_attr('sensor.openevse_status', 'state') -}})
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^254$') -%}
            Sleeping
          {%- elif state_attr('sensor.openevse_status', 'state') | regex_match('^255$') -%}
            Disabled
          {%- else -%}
            Unknown ({{- state_attr('sensor.openevse_status', 'state') -}})
          {%- endif -%}
    

  - platform: mqtt
    name: "OpenEVSE Temp 1"
    state_topic: !secret OPENEVSE_T_TEMP1
    unit_of_measurement: 'Â°F'
    device_class: temperature
    value_template: >-
      {%- macro C2F(temperature) -%}
        {% set tmp = (((temperature *9) /50.0) + 32) %}
        {{- "%0.2f" % tmp -}}
      {%- endmacro -%}
      {{- C2F(value|float)|float -}}

  - platform: mqtt
    name: "OpenEVSE Charging Current (MQTT)"
    icon: mdi:current-ac
    state_topic: !secret OPENEVSE_T_AMP
    unit_of_measurement: "A"
    value_template: >-
      {{- (value|float / 1000.0) | round(1) -}}

  - platform: mqtt
    name: "OpenEVSE Pilot Current (MQTT)"
    icon: mdi:current-ac
    state_topic: !secret OPENEVSE_T_PILOT
    unit_of_measurement: "A"
    value_template: >-
      {{- value|int -}}

  - platform: mqtt
    name: "OpenEVSE Total Energy"
    icon: mdi:gauge-full
    state_topic: !secret OPENEVSE_T_WH
    unit_of_measurement: "kWh"
    value_template: >-
      {{- value|float / 1000 | round(2) -}}

# Switches
switch:
  - platform: template
    switches:
      openevse_enable:
        friendly_name: "OpenEVSE Enable"
        turn_off:
          - service: rest_command.openevse_rapi
            data:
              url: !secret OPENEVSE_REST_DISABLE
        turn_on:
          - service: rest_command.openevse_rapi
            data:
              url: !secret OPENEVSE_REST_ENABLE
        icon_template: >-
          {%- if state_attr('sensor.openevse_status', 'state') | regex_match('^[0123]$') -%}
            mdi:power-on
          {%- else -%}
            mdi:power-off
          {%- endif -%}
        value_template: >-
          {{- state_attr('sensor.openevse_status', 'state') | regex_match('^[0123]$') -}}

      openevse_divertmode:
        friendly_name: "OpenEVSE Eco Divert"
        turn_off:
          - service: mqtt.publish
            data:
              topic: !secret OPENEVSE_T_DIVERT
              retain: true
              payload: 1
        turn_on:
          - service: mqtt.publish
            data:
              topic: !secret OPENEVSE_T_DIVERT
              retain: true
              payload: 2
        icon_template: >-
          {%- if state_attr('sensor.openevse_status', 'divertmode') | regex_match('^2$') -%}
            mdi:solar-power
          {%- else -%}
            mdi:power-off
          {%- endif -%}
        value_template: >-
          {{- state_attr('sensor.openevse_status', 'divertmode') | regex_match('^2$') -}}
      
input_boolean:
  # When true causes pilot current changes to be persisted into the OpenEVSE
  # firmware (otherwise saving pilot current is temporary) when this is OFF
  # then the volatile parameter is sent when changing the current
  openevse_save_current:
    name: "OpenEVSE Persist Current"
    initial: on
    icon: mdi:sync

input_number:
  openevse_current:
    name: "OpenEVSE Current"
    unit_of_measurement: "A"
    min: 10
    max: 40
    initial: 40
    step: 1

input_select:
  # Requires use of custom input_select component
  openevse_service_level:
    name: OpenEVSE Service Level
    options:
      - "Auto"
      - "Level 1"
      - "Level 2"
    values:
      - "A"
      - "1"
      - "2"
    icon: mdi:target

script:
  set_openevse_max_current:
    icon: mdi:content-save
    alias: OpenEVSE Set Pilot
    sequence:
      - service: rest_command.openevse_rapi
        data:
          host: !secret OPENEVSE_HOST
          rapi: "{{ '$SC ' ~ (states('input_number.openevse_current')|int) ~ (' V' if not is_state('input_boolean.openevse_save_current', 'on')) }}"

automation openevse:
  - alias: Update OpenEVSE Min/Max Current
    id: update_openevse_min_max_current
    trigger:
      platform: state
      entity_id: sensor.openevse_rapi_gc
    condition:
      condition: template
      value_template: >-
        {{ state_attr('sensor.openevse_rapi_gc', 'ret') | regex_match('^\$OK [0-9]+ +[0-9]+') }}
    action:
      - service: input_number.set_range
        data_template:
          entity_id: input_number.openevse_current
          # Restrict the min to 6A - 10A
          min: >-
            {%- set ret = state_attr('sensor.openevse_rapi_gc', 'ret') -%}
            {%- set rgx = '(?<=^\$OK) +([0-9]+) +([0-9]+)' -%}
            {%- set v = ret | regex_findall_index(rgx) -%}
            {{- [10, [6, v[0]|int]|max] | min -}}
          # Restrict the max to 40A even if L2 returns >40A
          max: >-
            {%- set ret = state_attr('sensor.openevse_rapi_gc', 'ret') -%}
            {%- set rgx = '(?<=^\$OK )([0-9]+) +([0-9]+)' -%}
            {%- set v = ret | regex_findall_index(rgx) -%}
            {{- [40, v[1]|int]|min -}}

  - id: update_input_number_openevse_current
    alias: Update input_number OpenEVSE Current
    description: >-
      Reflect changes made to pilot current on OpenEVSE back to the input_number
      slider position.
    trigger:
      platform: state
      entity_id: sensor.openevse_pilot_current
    condition:
      condition: template
      value_template: >-
        {{
           (states('sensor.openevse_pilot_current')|int >= state_attr('input_number.openevse_current', 'min')|int)
           and
           (states('sensor.openevse_pilot_current')|int <= state_attr('input_number.openevse_current', 'max')|int)
        }}
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.openevse_current
          value: "{{ states('sensor.openevse_pilot_current')|int }}"
    
  - alias: Update OpenEVSE Service Level
    id: update_openevse_service_level
    description: >-
      Reflect changes made to service level on the OpenEVSE back to Home Assistant.
    trigger:
      platform: mqtt
      topic: !secret OPENEVSE_T_ISL
    action:
      service: input_select.select_option
      data_template:
        entity_id: input_select.openevse_service_level
        option: >-
          {%- for option in state_attr("input_select.openevse_service_level", "values") -%}
            {%- if trigger.payload == option -%}
              {{- state_attr("input_select.openevse_service_level", 'options')[loop.index - 1] -}}
            {%- endif -%}
          {%- endfor -%}

  - alias: Set OpenEVSE Service Level
    id: set_openevse_service_level
    trigger:
      platform: state
      entity_id: input_select.openevse_service_level
    action:
      service: rest_command.openevse_rapi
      data_template:
        host: !secret OPENEVSE_HOST
        rapi: >-
          {%- for option in state_attr("input_select.openevse_service_level", "options") -%}
            {%- if is_state("input_select.openevse_service_level", option) -%}
              {{- '$SL+' ~ state_attr("input_select.openevse_service_level", 'values')[loop.index - 1] -}}
            {%- endif -%}
          {%- endfor -%}
